package client

import (
	"fmt"
	"net"

	"github.com/ygzaydn/golang-sip/logger"
	"github.com/ygzaydn/golang-sip/models/sip"
	"github.com/ygzaydn/golang-sip/utils"
)

type UDPClient struct {
	Connection *net.UDPConn
	logger     *logger.Logger
}

func New(ip string, port int, bufferSize int, logger *logger.Logger) (*UDPClient, error) {
	conn, err := connectUDPServer(ip, port)
	if err != nil {
		return nil, err
	}

	go udpListener(conn, bufferSize, logger)

	return &UDPClient{
		Connection: conn,
		logger:     logger,
	}, err
}

func connectUDPServer(ip string, port int) (*net.UDPConn, error) {
	serverAddr := net.UDPAddr{
		IP:   net.ParseIP(ip), // Server IP address
		Port: port,            // SIP server port
	}
	conn, err := net.DialUDP("udp", nil, &serverAddr)
	if err != nil {
		return nil, err
	}

	return conn, err
}

func udpListener(conn *net.UDPConn, bufferSize int, logger *logger.Logger) {

	// Not sure if I should make bufferSize as a parameter
	buffer := make([]byte, bufferSize)
	defer conn.Close()
	for {

		n, clientAddr, err := conn.ReadFromUDP(buffer)

		if err != nil {
			fmt.Println("Error reading from client:", err)
			continue
		}

		msg := string(buffer[:n])
		isValid := sip.ISSIPMessage(msg)

		if !isValid {
			logger.BuildLogMessage("Server received a message, but format is wrong, message skipped.")
			continue
		}

		message, err := sip.ToSIP(msg)

		if err != nil {
			fmt.Println(err)
			continue
		}
		if logger != nil {
			if message.StatusCode != 0 {
				logger.BuildLogMessage("Client Received \t- " + fmt.Sprint(message.StatusCode) + " " + utils.FormatLogMessage(message.Reason))
			} else {
				logger.BuildLogMessage("Client Received \t- " + utils.FormatLogMessage(message.Method))
			}
		}

		responseChannel := make(chan *sip.SIPMessage)

		go message.HandleRequest(responseChannel)

		for response := range responseChannel {

			_, err = conn.WriteToUDP([]byte(response.ToString()), clientAddr)
			if logger != nil {

				if response.StatusCode != 0 {
					logger.BuildLogMessage("Client Sent \t- " + fmt.Sprint(response.StatusCode) + " " + utils.FormatLogMessage(response.Reason))
				} else {
					logger.BuildLogMessage("Client Sent \t- " + utils.FormatLogMessage(response.Method))
				}
			}

			if err != nil {
				fmt.Println("Error sending response:", err)
			}
		}

		close(responseChannel)

	}
}

func (u *UDPClient) SendMessage(message *sip.SIPMessage) {
	u.logger.BuildLogMessage("Client Sent\t- " + utils.FormatLogMessage(message.Method))
	u.Connection.Write([]byte(message.ToString()))
}
