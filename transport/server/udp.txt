package server

import (
	"errors"
	"fmt"
	"net"

	"github.com/ygzaydn/golang-sip/logger"
	"github.com/ygzaydn/golang-sip/models/sip"
	"github.com/ygzaydn/golang-sip/utils"
)

type UDPServer struct {
	Connection *net.UDPConn
	logger     *logger.Logger
}

func New(ip string, port int, bufferSize int, logger *logger.Logger) (*UDPServer, error) {
	conn, err := createUDPServer(ip, port)
	if err != nil {
		return nil, err
	}
	go udpListener(conn, bufferSize, logger)
	return &UDPServer{
		Connection: conn,
		logger:     logger,
	}, err
}

func createUDPServer(ip string, port int) (*net.UDPConn, error) {

	addr := net.UDPAddr{
		Port: port,
		IP:   net.ParseIP(ip),
	}

	conn, err := net.ListenUDP("udp", &addr)

	if err != nil {
		return nil, errors.New("error creating UDP server")
	}

	fmt.Printf("UDP server listening on port %d...\n", port)

	return conn, err
}

func udpListener(conn *net.UDPConn, bufferSize int, logger *logger.Logger) {

	// Not sure if I should make bufferSize as a parameter
	buffer := make([]byte, bufferSize)
	defer conn.Close()
	for {

		n, clientAddr, err := conn.ReadFromUDP(buffer)

		if err != nil {
			fmt.Println("Error reading from client:", err)
			continue
		}

		msg := string(buffer[:n])
		isValid := sip.ISSIPMessage(msg)

		if !isValid {
			logger.BuildLogMessage("Server received a message, but format is wrong, message skipped.")
			continue
		}

		message, err := sip.ToSIP(msg)

		if err != nil {
			fmt.Println(err)
			continue
		}

		if logger != nil {
			logger.BuildLogMessage("Server Received\t- " + utils.FormatLogMessage(message.Method))
		}

		responseChannel := make(chan *sip.SIPMessage)

		go message.HandleRequest(responseChannel)

		for response := range responseChannel {

			_, err = conn.WriteToUDP([]byte(response.ToString()), clientAddr)
			if response.StatusCode != 0 {
				logger.BuildLogMessage("Server Sent \t- " + fmt.Sprint(response.StatusCode) + " " + utils.FormatLogMessage(response.Reason))
			} else {
				logger.BuildLogMessage("Server Sent \t- " + utils.FormatLogMessage(response.Method))
			}

			if err != nil {
				fmt.Println("Error sending response:", err)
			}
		}

		close(responseChannel)

	}
}
